let Server,express,createServer,path,game;_f53‍.w("socket.io",[["Server",["Server"],function(v){Server=v}]]);_f53‍.w("express",[["default",["express"],function(v){express=v}]]);_f53‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_f53‍.w("path",[["default",["path"],function(v){path=v}]]);_f53‍.w("./game",[["game",["game"],function(v){game=v}]]);




const app = express()
const PORT = process.env.PORT || 5500
const httpServer = createServer(app)
const io = new Server(httpServer)
const g = new game()
app.use(express.static(path.resolve('./src/client/serve')))

console.log('server running!')

io.on('connection', socket => {
    g.addConnection(socket)
    socket.on('addPlayer', (data) => {
      g.addPlayer(socket, data.u, data.s)
    })
    socket.on('mouseInput', data => {
      g.setShipDirection(g.players[socket.id], data)
    })
    socket.on('keyInput', data => {
      g.handleDirectionInput(socket.id, data)
    })
    socket.on('transport', data => {
      try{
        g.movePlayer(data.player, data.ship)
      }
      catch (err) {
        if (err.name === 'TypeError') {
          _f53‍.g.console.log(err)
        }
      }
    })
    socket.on('powerUpdate', data => {
      g.handlePowerUpdate(data.system, data.level, data.ship)
    })
    socket.on('fire', data => {
      g.handleFire(data.angle, data.ship)
    })
    socket.on('playerWeaponsDirection', data => {
      g.handlePlayerDirection(socket.id, data)
    })
    socket.on('playerFire', () => {g.handlePlayerFire(socket.id)})
    socket.on('startCargoTransport', data => {
      g.handleTransportStart(data)
    })
    socket.on('cancelCargoTransport', data => {
      g.cancelTransportRequest(data)
    })
    socket.on('disconnect', () => {
      g.disconnect(socket)
      socket.disconnect()
    })
})
httpServer.listen(PORT)



